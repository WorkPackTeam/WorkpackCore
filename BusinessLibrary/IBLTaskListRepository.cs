using System;
using System.Collections.Generic;
using DomainModelLibrary;
using System.Data;
using System.Collections;

namespace BusinessLibrary
{
    public interface IBLTaskListRepository
    {
        void AddTaskList(params ProjectTaskList[] TaskList);
        bool AssignTaskOwnerToSelectedTaskByID(int ProjectTaskID, int TaskOwner);
        void BackUpTaskListDetailAtEstimationPhase(int projectId);
        bool checkprogresshappenprojectid(int projectid);
        OperationResult checkUserRightsOnTask(int UserID, int TaskId);
        bool deleteTaskById(int ProjectTaskID);
        bool deleteTaskByTaskId(int ProjectTaskID, string UserID);
        bool deleteWithShiftOfSubTaskFunction(int GroupTaskID, int TaskID);
        List<usp_DrillDownProgressReport_Result> DrillDownProgressReport(int ProjectId, int DeptId, int TaskId);
        List<object> GetAllDelListByProjectID(int ProjectID);
        IList<Department> GetAllInvolvedDepartments(string ClientId, int ClientAsset, int ProjectID);
        IList<Designation> GetAllInvolvedDesignations(string ClientId, int ClientAsset, int ProjectID, int Dept);
        IList<User> GetAllInvolvedUser(string ClientId, int ClientAsset, int ProjectID, int Dept, int Desig);
        IList<ProjectTaskList> GetAllSubtasksByGroupTaskID(int TaskID);
        IList<ProjectTaskList> GetAllTaskList();
        List<ProjectTaskList> GetAllTaskListByProjectID(int ProjectID);
        List<ProjectTaskList> GetAllTaskListExcludingSysTaskByProjectID(int ProjectID);
        List<object> GetAllTaskListForDdl();
        List<ProjectTaskList> GetAllTaskListperprojectid(int projectid);
        List<ProjectTaskList> GetAllTaskListperprojectid(int projectid, int mastertasktype);
        IList<ProjectTaskList> GetAllTaskListWithCompanyID(int CompanyID);
        IList<usp_CompareTaskDetails_Contract_Result> getComContractNormCostcompare(int ProjectID, int NormSetID);
        IList<usp_CompareTaskDesignationDetails_Company_Result> GetCompareTaskDesignationDetails_Company(int ProjectID);
        IList<usp_CompareTaskDesignationDetails_Contract_Result> GetCompareTaskDesignationDetails_Contract(int ProjectTaskID, int NormSetID);
        IList<usp_getDelayTaskLit_Result> GetDelayTaskList(int userID, DateTime PresentDate);
        List<object> getDeliverableTaskByProjectID(int ProjectID);
        List<usp_getDrillDownProjectByProjectId_Result> getDrillDownProjectByProjectId(int projectId);
        usp_Set_Start_EndDateAwarded_Result getDurationWithoutHoliday(DateTime StartDate, DateTime EndDate, int Duration, int ProjectID);
        IList<EstimationTaskColumnsMaster> getEstimationTaskColumnsMastersProjectId(int ProjectID);
        DataTable GetEstimationTaskDesignationSummary(int projectId, DataTable taskList);
        List<ProjectTaskList> GetEstimationTaskListByProjectID(int ProjectID);
        DataTable GetEstimationTaskListSummary(DataTable taskList, int projectid);
        IList<object> getGroupTask(int ProjectID, int TaskID);
        int GetLockCountForProjectList(int ProjectID);
        IList<object> getLockTaskCreationSummaryLock(int projectID);
        string GetmaxtasknumoftasknoByProjectID(int ProjectID);
        IList<usp_getMileStoneDetails_Report_Result> getMileStoneDetailsByProjectID_Report(int ProjectID);
        IList<usp_getMileStoneTargetDatesDetails_Report_Result> getMileStoneTargetDatesDetails_Report(int ProjectID);
        List<usp_getProjectMilestoneTask_Result> getMilestoneTaskByProjectID(int ProjectID, int CompanyId);
        IList<VW_MYTASK> GetMyTask(VW_MYTASK objTask, int ProjectId);
        int GetNextChildCountNoByProjectTaskID(int ProjectTaskID);
        IList<usp_getOnGoingMyTaskList_Result> getOnGoingTaskList(int UserID);
        List<GetPrediccessorTask_Result> GetPrediccessorTask(int ProjectId, int TaskId, int TaskTypeId);
        List<usp_ProjectProgressSummary_Result> getProjectProgressSummary(string DeliverableNo, string Title, string DeptID, string Owner, string TaskStartingAfter, string EndingBefore, string ProjectCode, string ProjectName);
        List<ProjectTaskList> getProjectTaskByDeptIdProjectIDAndRequestID(int ProjectID, int DeptID, int RequestID);
        IEnumerable<ProjectTaskListSlickGrid> getProjectTaskByProjectID(int ProjectID);
        List<usp_getProjectTaskForReportByProjectID_Result> getProjectTaskByProjectID1(int ProjectID, int UserId, int ReportId);
        List<usp_getProjectTaskByProjectID_Result> getProjectTaskByProjectID1(int ProjectID, int UserId, string IsOtherClient, int MasterTaskTypeID);
        List<usp_getProjectTaskByProjectID_Contract_Result> getProjectTaskByProjectID1_Contract(int ProjectID, int ProjectContractID);
        ArrayList getProjectTaskListByGroupTaskID(int groupTaskID);
        IEnumerable<ProjectTaskListSlickGrid> getSubmittedProjectTaskByProjectID(int ProjectID);
        List<ProjectTaskList> getSubTaskDetailsByParentTaskId(int ParentTaskID);
        int GetTaskCountByProjectIDAndNormSetID(int ProjectID, int NormSetID);
        DataTable GetTaskDesignationSummary(int projectId, DataTable taskList);
        ProjectTaskList getTaskDetailsByTaskId(int ProjectTaskID);
        IList<usp_GetTaskDetailsByTaskID_Result> GetTaskDetailsByTaskID(int TaskID);
        int GetTaskIDByTaskObjectID(int TaskObjectID, int ProjectID);
        ProjectTaskList GetTaskListByID(int TaskID);
        IList<ProjectTaskList> GetTaskListByProjectTaskID(int ProjectTaskID);
        List<ProjectTaskList> getTaskListByTaskIds(string[] item);
        DataTable GetTaskListSummary(DataTable taskList, int projectid);
        IList<usp_TaskMilestoneTargetDatesByProjectTaskID_Result> getTaskMilestoneTargetDatesByTask(int ProjectTaskID);
        IList<usp_getTaskStatusReportByProjectID_Result> getTaskStatusReportByProjectID(int ProjectID);
        List<ProjectTaskList> GetXmlImportTask(int ProjectID);
        OperationResult groupTask(string UserID, string ScopeChangeId, string[] item, string MasterTaskType);
        OperationResult groupTaskAsTT(string ProjectID, string UserID, string ScopeChangeId);
        bool IsAllTaskScheduled(int ProjectID);
        bool IsParentTask(int ProjectTaskListID);
        string IsProjectScheduledOnce(string ProjectID);
        void markCommentRead(int TaskID, int UserID);
        void moveRowGroup(int GroupTaskId, string TaskItem, string UserID, string ProjectID);
        OperationResult Movetimeline(string startdate, int ProjectID);
        void RemoveTaskList(params ProjectTaskList[] TaskList);
        bool saveProjectTaskList(string xmlTargetDates, ProjectTaskList obj, int ProjectTaskID, string xmlTaskDependency, int statusID, int ScopeChangeID, out int VPojectTaskID1);
        bool saveProjectTaskList_Integrated(string xmlTargetDates, ProjectTaskList obj, int ProjectTaskID, string xmlTaskDependency, int statusID, int ScopeChangeID, out int VPojectTaskID1);
        bool saveProjectTaskList_IntegratedNew(string xmlTargetDates, ProjectTaskList obj, int ProjectTaskID, string xmlTaskDependency, int statusID, int ScopeChangeID, out int VPojectTaskID1, int UserID);
        void SendEmailNotificationToUser(int TaskID, int MilestoneID, int UserID);
        OperationResult SetStartEndDateUsingDate(string StartDate, string EndDate, int Duration, int ProjectID);
        OperationResult SetStartEndDateUsingDuration(int ProjectID, int Duration);
        OperationResult SetStartEndDateUsingDuration_new(int ProjectID, int Duration, DateTime startDate);
        string SubmitEstimationTaskByAllDepartment(string ProjectID);
        int TaskOwnerExistInProjectTaskList(int ProjectID);
        bool TaskUnderScopeChange(string PrimaryId, string ProjectID, string UserID, Dictionary<string, string[]> item, string mode, string ScopeChangeID);
        bool TaskUnderScopeChangeGrTask(string UserID, ProjectTaskList item, string mode, string ScopeChangeID);
        bool unGroupTaskByGropTask(int ProjectTaskID, string UserID);
        void UpdateTaskList(params ProjectTaskList[] TaskList);
        void UpdateTaskProgress(int milestoneID, int DeliverableListID);
        void UpdateTaskStatusSendEmailToDormantUsers(int TaskID, int UserID);
    }
}